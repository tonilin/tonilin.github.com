<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails, | 蟑螂窩]]></title>
  <link href="http://blog.roachking.net/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.roachking.net/"/>
  <updated>2018-03-12T18:00:13+08:00</updated>
  <id>http://blog.roachking.net/</id>
  <author>
    <name><![CDATA[tonilin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pygments.rb 效能調校]]></title>
    <link href="http://blog.roachking.net/blog/2014/07/08/pygments-rb-performance/"/>
    <updated>2014-07-08T15:38:00+08:00</updated>
    <id>http://blog.roachking.net/blog/2014/07/08/pygments-rb-performance</id>
    <content type="html"><![CDATA[<p>最近<a href="http://osolve.com">公司</a>的新產品 <a href="https://torchpad.com/">Torchpad</a> 剛上線，一開始效能都很好，</p>

<p>可是在文章在 render markdown 的時候非常慢，在觀察之後，發現只有在有 fenced code 的頁面才會特別慢，</p>

<p>在仔細看，原來是使用者沒有輸入正確的語言格式(誤把檔案名稱當語言)：</p>

<p><code>plain
 </code>app/assets/javascripts/angular/app.js</p>

<pre><code>app = angular.module("app", [])
</code></pre>

<p>  <code>
</code></p>

<p>正確的寫法應該是</p>

<p><code>plain
 </code>javascript app/assets/javascripts/angular/app.js</p>

<pre><code>app = angular.module("app", [])
</code></pre>

<p>  <code>
</code></p>

<p>第一種錯誤的寫法會讓回應時間多了 200ms，如果一個頁面裡面有 5 個這種寫錯的 fenced code，就至少會慢 1000ms，而且使用者一定會有出錯的時候。</p>

<!--more-->


<p>來看看 Pygments.rb Highlight 的 code，非常簡單，正確的語言進去就直接 render 出來，錯誤的會 raise exception，把 lexer 用 text 傳進去，確保不支援的語言也會顯示出來。</p>

<p>```ruby
def code_highlight(code, language)</p>

<pre><code>Pygments.highlight(code, :lexer =&gt; language)
</code></pre>

<p>  rescue => e</p>

<pre><code>Pygments.highlight(code, :lexer =&gt; "text")
</code></pre>

<p>end
```</p>

<p>速度既然是慢在不支援的語言噴錯以後 rescue 非常慢，現在要做的就是 Pygments 不支援的語言不要傳進去，於是去翻 Pygments.rb 的 code 發現一個方法，可以尋找 Pygments 支援的語言</p>

<p><code>ruby
Pygments::Lexer.find(language)
</code></p>

<p>試了一下這個 method，就算傳進錯誤的或不存在的語言，速度也非常快。</p>

<p>於是解決方法就出來了，只要先判斷再 Highlight 就好了：</p>

<p>```ruby
def code_highlight(code, language)
  if Pygments::Lexer.find(language)</p>

<pre><code>Pygments.highlight(code, :lexer =&gt; language)
</code></pre>

<p>  else</p>

<pre><code>Pygments.highlight(code, :lexer =&gt; "text")
</code></pre>

<p>  end
end
```</p>

<h2>Benchmark</h2>

<p>寫了一個簡單的 script 來測試一下兩種方法的速度</p>

<p>```ruby
require &lsquo;pygments&rsquo;
require &lsquo;benchmark&rsquo;</p>

<p>include Benchmark</p>

<h1>number of iterations</h1>

<p>num = 20</p>

<p>code = &lsquo;app = angular.module(&ldquo;app&rdquo;, [])&rsquo;</p>

<p>puts &ldquo;Benchmarking&hellip;.\n&rdquo;
puts &ldquo;Iterations: &rdquo; + num.to_s + &ldquo;\n&rdquo;</p>

<p>def highlight_fail_raise_exception(code, language)
  Pygments.highlight(code, :lexer => language)
rescue => e
  Pygments.highlight(code, :lexer => &ldquo;text&rdquo;)
end</p>

<p>def highlight_fail_dont_raise_exception(code, language)
  if Pygments::Lexer.find(language)</p>

<pre><code>Pygments.highlight(code, :lexer =&gt; language)
</code></pre>

<p>  else</p>

<pre><code>Pygments.highlight(code, :lexer =&gt; "text")
</code></pre>

<p>  end
end</p>

<p>Benchmark.bm(40) do |x|
  x.report(&ldquo;Currect language before fixed&rdquo;)  do</p>

<pre><code>for i in 1..num
  highlight_fail_raise_exception(code, "javascript")
end
</code></pre>

<p>  end
end</p>

<p>Benchmark.bm(40) do |x|
  x.report(&ldquo;Wrong language before fixed&rdquo;)  do</p>

<pre><code>for i in 1..num
  highlight_fail_raise_exception(code, "app/assets/javascripts/angular/app.js")
end
</code></pre>

<p>  end
end</p>

<p>Benchmark.bm(40) do |x|
  x.report(&ldquo;Currect language after fixed&rdquo;)  do</p>

<pre><code>for i in 1..num
  highlight_fail_dont_raise_exception(code, "javascript")
end
</code></pre>

<p>  end
end</p>

<p>Benchmark.bm(40) do |x|
  x.report(&ldquo;Wrong language after fixed&rdquo;)  do</p>

<pre><code>for i in 1..num
  highlight_fail_dont_raise_exception(code, "app/assets/javascripts/angular/app.js")
end
</code></pre>

<p>  end
end
```</p>

<p>可以看到差異是非常大的：</p>

<p>```text
Benchmarking&hellip;.
Iterations: 20</p>

<pre><code>                                           user     system      total        real
</code></pre>

<p>Currect language before fixed              0.000000   0.000000   0.000000 (  0.190763)</p>

<pre><code>                                           user     system      total        real
</code></pre>

<p>Wrong language before fixed                0.020000   0.010000   2.740000 (  2.730492)</p>

<pre><code>                                           user     system      total        real
</code></pre>

<p>Currect language after fixed               0.020000   0.000000   0.020000 (  0.074654)</p>

<pre><code>                                           user     system      total        real
</code></pre>

<p>Wrong language after fixed                 0.000000   0.010000   0.010000 (  0.018810)
```</p>
]]></content>
  </entry>
  
</feed>
